mongodb_test

use mtest
switched to db mtest
db.sales.insertMany([
	{ "_id" : 1, "item" : "Americanos", "price" : 5, "size": "Short", "quantity" : 22, "date" : ISODate("2022-01-15T08:00:00Z") },
	{ "_id" : 2, "item" : "Cappuccino", "price" : 6, "size": "Short","quantity" : 12, "date" : ISODate("2022-01-16T09:00:00Z") },
	{ "_id" : 3, "item" : "Lattes", "price" : 15, "size": "Grande","quantity" : 25, "date" : ISODate("2022-01-16T09:05:00Z") },
	{ "_id" : 4, "item" : "Mochas", "price" : 25,"size": "Tall", "quantity" : 11, "date" : ISODate("2022-02-17T08:00:00Z") },
	{ "_id" : 5, "item" : "Americanos", "price" : 10, "size": "Grande","quantity" : 12, "date" : ISODate("2022-02-18T21:06:00Z") },
	{ "_id" : 6, "item" : "Cappuccino", "price" : 7, "size": "Tall","quantity" : 20, "date" : ISODate("2022-02-20T10:07:00Z") },
	{ "_id" : 7, "item" : "Lattes", "price" : 25,"size": "Tall", "quantity" : 30, "date" : ISODate("2022-02-21T10:08:00Z") },
	{ "_id" : 8, "item" : "Americanos", "price" : 10, "size": "Grande","quantity" : 21, "date" : ISODate("2022-02-22T14:09:00Z") },
	{ "_id" : 9, "item" : "Cappuccino", "price" : 10, "size": "Grande","quantity" : 17, "date" : ISODate("2022-02-23T14:09:00Z") },
	{ "_id" : 10, "item" : "Americanos", "price" : 8, "size": "Tall","quantity" : 15, "date" : ISODate("2022-02-25T14:09:00Z")}
]);
{
  acknowledged: true,
  insertedIds: {
    '0': 1,
    '1': 2,
    '2': 3,
    '3': 4,
    '4': 5,
    '5': 6,
    '6': 7,
    '7': 8,
    '8': 9,
    '9': 10
  }
}


QUESTION 1

1. How do you find all documents where the field "item" is "Mochas"?

db.sales.find({ item: "Mochas" })
{
  _id: 4,
  item: 'Mochas',
  price: 25,
  size: 'Tall',
  quantity: 11,
  date: 2022-02-17T08:00:00.000Z
}


QUESTION 2

2. How do you find all items who are less than 15 of price?

db.sales.find({ price: { $lt: 15 } })
{
  _id: 1,
  item: 'Americanos',
  price: 5,
  size: 'Short',
  quantity: 22,
  date: 2022-01-15T08:00:00.000Z
}
{
  _id: 2,
  item: 'Cappuccino',
  price: 6,
  size: 'Short',
  quantity: 12,
  date: 2022-01-16T09:00:00.000Z
}
{
  _id: 5,
  item: 'Americanos',
  price: 10,
  size: 'Grande',
  quantity: 12,
  date: 2022-02-18T21:06:00.000Z
}
{
  _id: 6,
  item: 'Cappuccino',
  price: 7,
  size: 'Tall',
  quantity: 20,
  date: 2022-02-20T10:07:00.000Z
}
{
  _id: 8,
  item: 'Americanos',
  price: 10,
  size: 'Grande',
  quantity: 21,
  date: 2022-02-22T14:09:00.000Z
}
{
  _id: 9,
  item: 'Cappuccino',
  price: 10,
  size: 'Grande',
  quantity: 17,
  date: 2022-02-23T14:09:00.000Z
}
{
  _id: 10,
  item: 'Americanos',
  price: 8,
  size: 'Tall',
  quantity: 15,
  date: 2022-02-25T14:09:00.000Z
}


QUESTION 3

3. How do you find items who are either less than 10 or greater than 20?

db.sales.find({ $or: [ { price: { $lt: 10 } }, { price: { $gt: 20 } } ] })
{
  _id: 1,
  item: 'Americanos',
  price: 5,
  size: 'Short',
  quantity: 22,
  date: 2022-01-15T08:00:00.000Z
}
{
  _id: 2,
  item: 'Cappuccino',
  price: 6,
  size: 'Short',
  quantity: 12,
  date: 2022-01-16T09:00:00.000Z
}
{
  _id: 4,
  item: 'Mochas',
  price: 25,
  size: 'Tall',
  quantity: 11,
  date: 2022-02-17T08:00:00.000Z
}
{
  _id: 6,
  item: 'Cappuccino',
  price: 7,
  size: 'Tall',
  quantity: 20,
  date: 2022-02-20T10:07:00.000Z
}
{
  _id: 7,
  item: 'Lattes',
  price: 25,
  size: 'Tall',
  quantity: 30,
  date: 2022-02-21T10:08:00.000Z
}
{
  _id: 10,
  item: 'Americanos',
  price: 8,
  size: 'Tall',
  quantity: 15,
  date: 2022-02-25T14:09:00.000Z
}


QUESTION 4

4. How do you find all documents where the quantity field exists?

db.sales.find({ quantity: { $exists: true } })
{
  _id: 1,
  item: 'Americanos',
  price: 5,
  size: 'Short',
  quantity: 22,
  date: 2022-01-15T08:00:00.000Z
}
{
  _id: 2,
  item: 'Cappuccino',
  price: 6,
  size: 'Short',
  quantity: 12,
  date: 2022-01-16T09:00:00.000Z
}
{
  _id: 3,
  item: 'Lattes',
  price: 15,
  size: 'Grande',
  quantity: 25,
  date: 2022-01-16T09:05:00.000Z
}
{
  _id: 4,
  item: 'Mochas',
  price: 25,
  size: 'Tall',
  quantity: 11,
  date: 2022-02-17T08:00:00.000Z
}
{
  _id: 5,
  item: 'Americanos',
  price: 10,
  size: 'Grande',
  quantity: 12,
  date: 2022-02-18T21:06:00.000Z
}
{
  _id: 6,
  item: 'Cappuccino',
  price: 7,
  size: 'Tall',
  quantity: 20,
  date: 2022-02-20T10:07:00.000Z
}
{
  _id: 7,
  item: 'Lattes',
  price: 25,
  size: 'Tall',
  quantity: 30,
  date: 2022-02-21T10:08:00.000Z
}
{
  _id: 8,
  item: 'Americanos',
  price: 10,
  size: 'Grande',
  quantity: 21,
  date: 2022-02-22T14:09:00.000Z
}
{
  _id: 9,
  item: 'Cappuccino',
  price: 10,
  size: 'Grande',
  quantity: 17,
  date: 2022-02-23T14:09:00.000Z
}
{
  _id: 10,
  item: 'Americanos',
  price: 8,
  size: 'Tall',
  quantity: 15,
  date: 2022-02-25T14:09:00.000Z
}




db.products.insertMany([
    { "_id" : 1, "name" : "xPhone", "price" : 799, "releaseDate": ISODate("2011-05-14"), "spec" : { "ram" : 4, "screen" : 6.5, "cpu" : 2.66 },"color":["white","black"],"storage":[64,128,256]},
    { "_id" : 2, "name" : "xTablet", "price" : 899, "releaseDate": ISODate("2011-09-01") , "spec" : { "ram" : 16, "screen" : 9.5, "cpu" : 3.66 },"color":["white","black","purple"],"storage":[128,256,512]},
    { "_id" : 3, "name" : "SmartTablet", "price" : 899, "releaseDate": ISODate("2015-01-14"), "spec" : { "ram" : 12, "screen" : 9.7, "cpu" : 3.66 },"color":["blue"],"storage":[16,64,128]},
    { "_id" : 4, "name" : "SmartPad", "price" : 699, "releaseDate": ISODate("2020-05-14"),"spec" : { "ram" : 8, "screen" : 9.7, "cpu" : 1.66 },"color":["white","orange","gold","gray"],"storage":[128,256,1024]},
    { "_id" : 5, "name" : "SmartPhone", "price" : 599,"releaseDate": ISODate("2022-09-14"), "spec" : { "ram" : 4, "screen" : 9.7, "cpu" : 1.66 },"color":["white","orange","gold","gray"],"storage":[128,256]}
 ])
{
  acknowledged: true,
  insertedIds: {
    '0': 1,
    '1': 2,
    '2': 3,
    '3': 4,
    '4': 5
  }
}




QUESTION 5

5. How do you find all documents where the color array contains the value "white"?

db.products.find({ color: "white" })
{
  _id: 1,
  name: 'xPhone',
  price: 799,
  releaseDate: 2011-05-14T00:00:00.000Z,
  spec: {
    ram: 4,
    screen: 6.5,
    cpu: 2.66
  },
  color: [
    'white',
    'black'
  ],
  storage: [
    64,
    128,
    256
  ]
}
{
  _id: 2,
  name: 'xTablet',
  price: 899,
  releaseDate: 2011-09-01T00:00:00.000Z,
  spec: {
    ram: 16,
    screen: 9.5,
    cpu: 3.66
  },
  color: [
    'white',
    'black',
    'purple'
  ],
  storage: [
    128,
    256,
    512
  ]
}
{
  _id: 4,
  name: 'SmartPad',
  price: 699,
  releaseDate: 2020-05-14T00:00:00.000Z,
  spec: {
    ram: 8,
    screen: 9.7,
    cpu: 1.66
  },
  color: [
    'white',
    'orange',
    'gold',
    'gray'
  ],
  storage: [
    128,
    256,
    1024
  ]
}
{
  _id: 5,
  name: 'SmartPhone',
  price: 599,
  releaseDate: 2022-09-14T00:00:00.000Z,
  spec: {
    ram: 4,
    screen: 9.7,
    cpu: 1.66
  },
  color: [
    'white',
    'orange',
    'gold',
    'gray'
  ],
  storage: [
    128,
    256
  ]
}



QUESTION 6

6. How do you update the ram of the user named "xTablet" to 24?

db.products.updateOne(
  { name: "xTablet" },  // Filter: Find the document where name is "xTablet"
  { $set: { "spec.ram": 24 } }  // Update: Set RAM to 24GB
)

{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}



QUESTION 7

7. How do you find all products and only return their 'spec' field?

db.products.find({}, { _id: 0, spec: 1 })
{
  spec: {
    ram: 4,
    screen: 6.5,
    cpu: 2.66
  }
}
{
  spec: {
    ram: 24,
    screen: 9.5,
    cpu: 3.66
  }
}
{
  spec: {
    ram: 12,
    screen: 9.7,
    cpu: 3.66
  }
}
{
  spec: {
    ram: 8,
    screen: 9.7,
    cpu: 1.66
  }
}
{
  spec: {
    ram: 4,
    screen: 9.7,
    cpu: 1.66
  }
}



QUESTION 8

8. How do you find all products and sort them by their price in descending order?


db.products.find().sort({ price: -1 })
{
  _id: 2,
  name: 'xTablet',
  price: 899,
  releaseDate: 2011-09-01T00:00:00.000Z,
  spec: {
    ram: 24,
    screen: 9.5,
    cpu: 3.66
  },
  color: [
    'white',
    'black',
    'purple'
  ],
  storage: [
    128,
    256,
    512
  ]
}
{
  _id: 3,
  name: 'SmartTablet',
  price: 899,
  releaseDate: 2015-01-14T00:00:00.000Z,
  spec: {
    ram: 12,
    screen: 9.7,
    cpu: 3.66
  },
  color: [
    'blue'
  ],
  storage: [
    16,
    64,
    128
  ]
}
{
  _id: 1,
  name: 'xPhone',
  price: 799,
  releaseDate: 2011-05-14T00:00:00.000Z,
  spec: {
    ram: 4,
    screen: 6.5,
    cpu: 2.66
  },
  color: [
    'white',
    'black'
  ],
  storage: [
    64,
    128,
    256
  ]
}
{
  _id: 4,
  name: 'SmartPad',
  price: 699,
  releaseDate: 2020-05-14T00:00:00.000Z,
  spec: {
    ram: 8,
    screen: 9.7,
    cpu: 1.66
  },
  color: [
    'white',
    'orange',
    'gold',
    'gray'
  ],
  storage: [
    128,
    256,
    1024
  ]
}
{
  _id: 5,
  name: 'SmartPhone',
  price: 599,
  releaseDate: 2022-09-14T00:00:00.000Z,
  spec: {
    ram: 4,
    screen: 9.7,
    cpu: 1.66
  },
  color: [
    'white',
    'orange',
    'gold',
    'gray'
  ],
  storage: [
    128,
    256
  ]
}



QUESTION 9

9. How do you find the first 2 products, skipping the first one?

db.products.find().skip(1).limit(2)
{
  _id: 2,
  name: 'xTablet',
  price: 899,
  releaseDate: 2011-09-01T00:00:00.000Z,
  spec: {
    ram: 24,
    screen: 9.5,
    cpu: 3.66
  },
  color: [
    'white',
    'black',
    'purple'
  ],
  storage: [
    128,
    256,
    512
  ]
}
{
  _id: 3,
  name: 'SmartTablet',
  price: 899,
  releaseDate: 2015-01-14T00:00:00.000Z,
  spec: {
    ram: 12,
    screen: 9.7,
    cpu: 3.66
  },
  color: [
    'blue'
  ],
  storage: [
    16,
    64,
    128
  ]
}



QUESTION 10


10. How do you find all users whose name starts with the letter "S" and price should be greater of 700?

db.products.find({ 
  name: { $regex: "^S", $options: "i" }, 
  price: { $gt: 700 }  
})
{
  _id: 3,
  name: 'SmartTablet',
  price: 899,
  releaseDate: 2015-01-14T00:00:00.000Z,
  spec: {
    ram: 12,
    screen: 9.7,
    cpu: 3.66
  },
  color: [
    'blue'
  ],
  storage: [
    16,
    64,
    128
  ]
}


QUESTION 11

11. How do you calculate the total price of all items?

db.sales.aggregate([
  {
    $group: {
      _id: null, 
      totalPrice: { $sum: { $multiply: ["$price", "$quantity"] } }
    }
  }
])

{
  _id: null,
  totalPrice: 2342
}



QUESTION 12

12.How do you project only the size field for each items?

db.sales.find({}, { _id: 0, size: 1 })

{
  size: 'Short'
}
{
  size: 'Short'
}
{
  size: 'Grande'
}
{
  size: 'Tall'
}
{
  size: 'Grande'
}
{
  size: 'Tall'
}
{
  size: 'Tall'
}
{
  size: 'Grande'
}
{
  size: 'Grande'
}
{
  size: 'Tall'
}



QUESTION 13

13. How do you find items who are Tall size &  group them by item wise?

db.sales.aggregate([
  {
    $match: { size: "Tall" } 
  },
  {
    $group: {
      _id: "$item",            
    
    }
  }
])


{
  _id: 'Americanos'
}
{
  _id: 'Mochas'
}
{
  _id: 'Cappuccino'
}
{
  _id: 'Lattes'
}




QUESTION 14

14. How do you find the second item when sorted by price in ascending order?

db.sales.find().sort({ price: 1 }).skip(1).limit(1)

{
  _id: 2,
  item: 'Cappuccino',
  price: 6,
  size: 'Short',
  quantity: 12,
  date: 2022-01-16T09:00:00.000Z
}


QUESTION 15

15. How do you group by items and calculate the total number of items and average price in a single aggregation?

db.sales.aggregate([
  {
    $group: {
      _id: "$item",  // Group by item name
      totalQuantity: { $sum: "$quantity" },  // Sum up the total quantity of each item
      avgPrice: { $avg: "$price" }  // Calculate the average price of each item
    }
  }
])
{
  _id: 'Americanos',
  totalQuantity: 70,
  avgPrice: 8.25
}
{
  _id: 'Cappuccino',
  totalQuantity: 49,
  avgPrice: 7.666666666666667
}
{
  _id: 'Lattes',
  totalQuantity: 55,
  avgPrice: 20
}
{
  _id: 'Mochas',
  totalQuantity: 11,
  avgPrice: 25
}


